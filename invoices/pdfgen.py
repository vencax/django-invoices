'''
Created on Jun 8, 2012

@author: vencax
'''

from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

from django.utils.translation import ugettext
import datetime
from django.conf import settings
import os
from django.contrib.staticfiles import finders

EXTRA_CONTRACTOR_TEXT = getattr(settings, 'EXTRA_CONTRACTOR_TEXT', None)


class InvoicePdfGenerator(object):
    """
    This class can print an invoice object into PDF stream.
    """
    lineWidth = 14
    titleWidth = 100
    signPicture = finders.find('invoices/invoiceSign.png')

    def __init__(self, stream):
        self.p = canvas.Canvas(stream, pagesize=letter)
        try:
            fontname = 'opensans'
            fontfile = finders.find('invoices/OpenSans-Regular.ttf')
            pdfmetrics.registerFont(TTFont(fontname, fontfile))
            self.p.setFont(fontname, 12)
        except:
            pass

    def generate(self, invoice):
        self.p.setFontSize(16)
        self._ds(100, 100, '%s %i' % (ugettext('invoice'), invoice.id))
        self._line(102)

        self.p.setFontSize(12)
        self._drawContractor(invoice)
        self._drawSubscriber(invoice)
        self._drawItems(invoice)

        self.p.setFontSize(8)
        self.p.drawString(100, 50, '%s %s' % (ugettext('generated by'),
                                    'django-invoices | vxk.cz'))
        # Close the PDF object cleanly, and we're done.
        self.p.showPage()
        self.p.save()

    def _ds(self, x, y, stringToDraw):
        self.p.drawString(x, letter[1] - y, stringToDraw)

    def _line(self, y):
        self.p.line(100, letter[1] - y, 500, letter[1] - y)

    def _drawContractor(self, invoice):
        x, y = 100, 120

        self._ds(x, y, ugettext('contractor'))
        y += 20
        self._ds(x, y, invoice.contractor.user.get_full_name())
        y += self.lineWidth
        self._ds(x, y, invoice.contractor.address)
        y += self.lineWidth
        self._ds(x, y, invoice.contractor.town)
        y += self.lineWidth
        self._ds(x, y, invoice.contractor.state)
        if EXTRA_CONTRACTOR_TEXT:
            y += self.lineWidth
            self._ds(x, y, EXTRA_CONTRACTOR_TEXT)
        y += self.lineWidth * 2
        self._ds(x, y, '%s:' % ugettext('inum'))
        self._ds(x + self.titleWidth, y, invoice.contractor.inum)
        y += self.lineWidth
        self._ds(x, y, '%s:' % ugettext('tinum'))
        self._ds(x + self.titleWidth, y, invoice.contractor.tinum or\
                ugettext('Not tax payer'))
        y += self.lineWidth
        self._ds(x, y, '%s:' % ugettext('paymentWay'))
        self._ds(x + self.titleWidth, y, invoice.get_paymentWay_display())
        y += self.lineWidth
        self._ds(x, y, '%s:' % ugettext('variable symbol'))
        self._ds(x + self.titleWidth, y, str(invoice.id))
        y += self.lineWidth
        self._ds(x, y, '%s:' % ugettext('bankaccount'))
        self._ds(x + self.titleWidth, y, invoice.contractor.bankaccount)

    def _drawSubscriber(self, invoice):
        x, y = 320, 120
        self._ds(x, y, ugettext('subscriber'))
        y += 20
        self._ds(x, y, invoice.subscriber.user.get_full_name())
        y += self.lineWidth
        self._ds(x, y, invoice.subscriber.address)
        y += self.lineWidth
        self._ds(x, y, invoice.subscriber.town)
        y += self.lineWidth
        self._ds(x, y, invoice.subscriber.state)
        y += self.lineWidth * 2
        self._ds(x, y, '%s:' % ugettext('inum'))
        self._ds(x + self.titleWidth, y, invoice.subscriber.inum)
        y += self.lineWidth
        self._ds(x, y, '%s:' % ugettext('tinum'))
        self._ds(x + self.titleWidth, y, invoice.subscriber.tinum or\
                 ugettext('Not tax payer'))
        y += self.lineWidth
        self._ds(x, y, '%s:' % ugettext('issueDate'))
        self._ds(x + self.titleWidth, y,
                 invoice.issueDate.strftime("%d. %m. %Y"))
        y += self.lineWidth
        self._ds(x, y, '%s:' % ugettext('dueDate'))
        self._ds(x + self.titleWidth, y,
                 invoice.dueDate.strftime("%d. %m. %Y"))
        y += self.lineWidth
        self._ds(x, y, '%s:' % ugettext('dataOfUZP'))
        self._ds(x + self.titleWidth, y,
                 invoice.issueDate.strftime("%d. %m. %Y"))

    def _drawItems(self, invoice):
        x, y = 100, 300
        self._ds(x, y, ugettext('name'))
        self._ds(x + 270, y, ugettext('count'))
        self._ds(x + 330, y, ugettext('price'))

        y += 4
        self._line(y)

        for i in invoice.items.all():
            y += self.lineWidth
            self._ds(x, y, i.name)
            self._ds(x + 280, y, str(i.count))
            self._ds(x + 350, y, self._printMoney(i.price, invoice))

        y += 4
        self._line(y)

        y += self.lineWidth
        self._ds(x, y, '%s:' % ugettext('TotalPrice'))
        self._ds(x + 350, y, self._printMoney(invoice.totalPrice(), invoice))

        if os.path.exists(self.signPicture):
            self.p.drawImage(self.signPicture, x + 200, y)

    def _printMoney(self, value, invoice):
        return ('%.2f %s' % (value, invoice.currency.code)).replace('.', ',')

# -----------------------------------------------------------------------------
if __name__ == "__main__":

    class MockInvoice(object):
        def __init__(self):
            self.contractor = {'user': 'ABC Devel'}
            self.subscriber = {'user': 'ZXY Consulting'}
            self.issueDate = datetime.datetime.now()
            self.id = 117

        def get_paymentWay_display(self):
            return 'By Account'

    mi = MockInvoice()
    gen = InvoicePdfGenerator()

    gen.generate(mi)
